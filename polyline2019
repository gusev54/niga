#include <iostream>
#include <vector>
#include <cmath>
#include <iterator>



class Polyline {
public:
    // Конструктур и деструктор, если необходимы
    Polyline() {
        dlinna = 0;
    }

    // Добавить очередную точку в ломаную
    void addPoint(double x, double y) {
        if (lom.size() > 1) {
            double x1 = (lom[lom.size() - 1]).first;
            double y1 = (lom[lom.size() - 1]).second;
            dlinna = dlinna + sqrt((x - x1) * (x - x1) + (y - y1) * (y - y1));
        }
        lom.push_back({ x, y });
        
    }


    // Получить количесто точек в ломаной в данный момент
    unsigned int getNumberOfPoints() const {
        return lom.size();
    }

    // Получить длину ломаной в данный момент
    double getLength() const {
        return dlinna;
    }

    // Получить x-координату i-ой точки ломаной, точки нумеруются в порядке добавления
    // (Гарантируется, что номер i строго меньше, чем то, вернула ваша getNumberOfPoints())
    double getX(unsigned int i) const {
        return lom[i].first;
    }

    // Получить y-координату i-ой точки ломаной, точки нумеруются в порядке добавления
    // (Гарантируется, что номер i строго меньше, чем то, вернула ваша getNumberOfPoints())
    double getY(unsigned int i) const {
        return lom[i].second;
    }
private:
    std::vector<std::pair<double, double>> lom;
    double dlinna;
};

int main()
{
    Polyline p;
    p.addPoint(0.0, 0.0);
    p.addPoint(1.0, 0.0);
    p.addPoint(1.0, 1.0);
    std::cout << "Length: " << p.getLength() << std::endl;
    std::cout << "Points:" << std::endl;
    for (unsigned int i = 0; i < p.getNumberOfPoints(); i++) {
        std::cout << p.getX(i) << " " << p.getY(i) << std::endl;
    }
    return 0;
}
